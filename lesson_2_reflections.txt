What happens when you initialize a repository? Why do you need it?
->When you initialize a repository, that repository will now be tracked by git. A hidden '.git' folder will be created in that repository which links that repository to github.This helps us to keep track of all the files in that directory we'll be making changes to.

How is the staging area different from working directory and the repository? What values do you think it offers?
->Staging area is a kind of intermediate level between a directory and a repository. Staging area offers a validation that we want to add these commits and at the same time it also increases productivity by adding changes of multiple files to the same commit.

How can you use staging area to make sure you have one commit per logical change?
->After adding a changed file to staging area I can use 'git diff' to see the difference between file from directory and file in staged area

What are some situations when branches would be helpful in keeping your history organised? How would branches help?
->While experimenting with new feature of an application, we can create a branch to commit changes regarding that feature to new branch while keeping our stable version intact. Branches can also be merged, thus the changes commited in one branch can be introduced in the stable version without any code alteration.

How do the diagrams help you visualise the branch structure?
->Diagrams basically consists of lines and asterisks(which work as commits) which simplifies the concept of branches alot.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
When two branches are merged together, the changes introduced in the file in those branches will be merged together(The state of files at the end of branches will be compared with the initial state of file when both branches were created). The changes will be added to final merged commit. Diagram just simplifies the interpretation of commits.